{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import * as PostgresFormat from 'pg-format'\nimport {Pool, PoolClient, Connection, QueryResult} from 'pg'\n\nexport interface Repository {\n  readonly pool: Pool\n}\n\nexport type RepositoryClass = new(...args: Array<any>) => Repository\n\nexport type QueryType = 'Query' | 'PureQuery' | 'MultipleQuery' | 'Transcation'\n\nexport interface QueryProperties {\n  type: QueryType\n  sql: string\n  fn: (...args: Array<any>) => any\n  filter: (r: QueryResult | ReadonlyArray<QueryResult>) => any\n}\n\nexport class PgTemplateContainer extends Map<RepositoryClass, Map<PropertyKey, QueryProperties>> {\n  private static sInstance: PgTemplateContainer\n\n  public static get instance(): PgTemplateContainer {\n    if (PgTemplateContainer.sInstance === undefined) {\n      PgTemplateContainer.sInstance = new PgTemplateContainer()\n    }\n    return PgTemplateContainer.sInstance\n  }\n\n  public transform() {\n    for (let [classType, map] of super.entries()) {\n      for (let [key, value] of map.entries()) {\n        if (typeof value.sql === 'string') {\n          switch (value.type) {\n          case 'Query':\n            value.fn = Reflect.get(classType.prototype, key)\n            Reflect.defineProperty(classType.prototype, key, {\n              value: async function (...args: any[]) {\n                let result = await this.pool.query(PostgresFormat.withArray(value.sql, args))\n                return typeof value.filter === 'function' ? value.filter(result) : result\n              }\n            })\n            break\n          case 'PureQuery':\n            value.fn = Reflect.get(classType.prototype, key)\n            Reflect.defineProperty(classType.prototype, key, {\n              value: function (...args: any[]) {\n                return async function (c: PoolClient) {\n                  let result = await c.query(PostgresFormat.withArray(value.sql, args))\n                  return typeof value.filter === 'function' ? value.filter(result) : result\n                }\n              }\n            })\n            break\n          case 'MultipleQuery':\n            value.fn = Reflect.get(classType.prototype, key)\n            Reflect.defineProperty(classType.prototype, key, {\n              value: async function (...args: any[]) {\n                let connection = await this.pool.connect()\n                let result: Array<QueryResult> = []\n                let sqls = PostgresFormat.withArray(value.sql, args).split(';').filter(x => x.trim().length > 0)\n                try {\n                  for (let s of sqls) {\n                    let a = await connection.query(s)\n                    result.push(a)\n                  }\n                } catch (e) {\n                  throw e\n                } finally {\n                  connection.release()\n                }\n                return typeof value.filter === 'function' ? value.filter(result) : result\n              }\n            })\n            break\n          case 'Transcation':\n            value.fn = Reflect.get(classType.prototype, key)\n            Reflect.defineProperty(classType.prototype, key, {\n              value: async function (...args: any[]) {\n                let connection = await this.pool.connect()\n                let result: Array<QueryResult> = []\n                let sqls = PostgresFormat.withArray(value.sql, args).split(';').filter(x => x.trim().length > 0)\n                try {\n                  await connection.query('BEGIN')\n                  for (let s of sqls) {\n                    let a = await connection.query(s)\n                    result.push(a)\n                  }\n                  await connection.query('COMMIT')\n                } catch (e) {\n                  await connection.query('ROLLBACK')\n                  throw e\n                } finally {\n                  connection.release()\n                }\n                return typeof value.filter === 'function' ? value.filter(result) : result\n              }\n            })\n            break\n          }\n        }\n      }\n    }\n  }\n\n  public untransform() {\n    for (let [classType, map] of super.entries()) {\n      for (let [key, value] of map.entries()) {\n        if (typeof value.sql === 'string') {\n          switch (value.type) {\n          case 'Query':\n          case 'PureQuery': \n          case 'MultipleQuery':\n          case 'Transcation':\n            Reflect.defineProperty(classType.prototype, key, {\n              value: value.fn\n            })\n            break\n          }\n        }\n      }\n    }\n  }\n}\n\nexport function Query(sql: string): PropertyDecorator {\n  return function (target: Repository, propertyKey: PropertyKey) {\n    let classType = target.constructor as RepositoryClass\n    if (!PgTemplateContainer.instance.has(classType)) {\n      PgTemplateContainer.instance.set(classType, new Map())\n    }\n    if (!PgTemplateContainer.instance.get(classType).has(propertyKey)) {\n      PgTemplateContainer.instance.get(classType).set(propertyKey, {\n        type: 'Query',\n        sql: sql,\n        fn: null,\n        filter: null\n      })\n    } else {\n      PgTemplateContainer.instance.get(classType).get(propertyKey).sql = sql\n    }\n  }\n}\n\nexport function PureQuery(sql: string): PropertyDecorator {\n  return function (target: Repository, propertyKey: PropertyKey) {\n    let classType = target.constructor as RepositoryClass\n    if (!PgTemplateContainer.instance.has(classType)) {\n      PgTemplateContainer.instance.set(classType, new Map())\n    }\n    if (!PgTemplateContainer.instance.get(classType).has(propertyKey)) {\n      PgTemplateContainer.instance.get(classType).set(propertyKey, {\n        type: 'PureQuery',\n        sql: sql,\n        fn: null,\n        filter: null\n      })\n    } else {\n      PgTemplateContainer.instance.get(classType).get(propertyKey).sql = sql\n    }\n  }\n}\n\nexport function QueryFilter<T>(filter: (r: QueryResult) => T): PropertyDecorator {\n  return function (target: Repository, propertyKey: PropertyKey) {\n    let classType = target.constructor as RepositoryClass\n    if (!PgTemplateContainer.instance.has(classType)) {\n      PgTemplateContainer.instance.set(classType, new Map())\n    }\n    if (!PgTemplateContainer.instance.get(classType).has(propertyKey)) {\n      PgTemplateContainer.instance.get(classType).set(propertyKey, {\n        type: 'Query',\n        sql: null,\n        fn: null,\n        filter: filter\n      })\n    } else {\n      PgTemplateContainer.instance.get(classType).get(propertyKey).filter = filter\n    }\n  }\n}\n\nexport function MultipleQuery(sql: string): PropertyDecorator {\n  return function (target: Repository, propertyKey: PropertyKey) {\n    let classType = target.constructor as RepositoryClass\n    if (!PgTemplateContainer.instance.has(classType)) {\n      PgTemplateContainer.instance.set(classType, new Map())\n    }\n    if (!PgTemplateContainer.instance.get(classType).has(propertyKey)) {\n      PgTemplateContainer.instance.get(classType).set(propertyKey, {\n        type: 'MultipleQuery',\n        sql: sql,\n        fn: null,\n        filter: null\n      })\n    } else {\n      PgTemplateContainer.instance.get(classType).get(propertyKey).sql = sql\n    }\n  }\n}\n\nexport function MultipleQueryFilter<T>(filter: (r: ReadonlyArray<QueryResult>) => T): PropertyDecorator {\n  return function (target: Repository, propertyKey: PropertyKey) {\n    let classType = target.constructor as RepositoryClass\n    if (!PgTemplateContainer.instance.has(classType)) {\n      PgTemplateContainer.instance.set(classType, new Map())\n    }\n    if (!PgTemplateContainer.instance.get(classType).has(propertyKey)) {\n      PgTemplateContainer.instance.get(classType).set(propertyKey, {\n        type: 'MultipleQuery',\n        sql: null,\n        fn: null,\n        filter: filter\n      })\n    }\n    PgTemplateContainer.instance.get(classType).get(propertyKey).filter = filter\n  }\n}\n\nexport function Transaction(sql: string): PropertyDecorator {\n  return function (target: Repository, propertyKey: PropertyKey) {\n    let classType = target.constructor as RepositoryClass\n    if (!PgTemplateContainer.instance.has(classType)) {\n      PgTemplateContainer.instance.set(classType, new Map())\n    }\n    if (!PgTemplateContainer.instance.get(classType).has(propertyKey)) {\n      PgTemplateContainer.instance.get(classType).set(propertyKey, {\n        type: 'Transcation',\n        sql: sql,\n        fn: null,\n        filter: null\n      })\n    } else {\n      PgTemplateContainer.instance.get(classType).get(propertyKey).sql = sql\n    }\n  }\n}\n\nexport function TransactionFilter<T>(filter: (r: ReadonlyArray<QueryResult>) => T): PropertyDecorator {\n  return function (target: Repository, propertyKey: PropertyKey) {\n    let classType = target.constructor as RepositoryClass\n    if (!PgTemplateContainer.instance.has(classType)) {\n      PgTemplateContainer.instance.set(classType, new Map())\n    }\n    if (!PgTemplateContainer.instance.get(classType).has(propertyKey)) {\n      PgTemplateContainer.instance.get(classType).set(propertyKey, {\n        type: 'Transcation',\n        sql: null,\n        fn: null,\n        filter: filter\n      })\n    }\n    PgTemplateContainer.instance.get(classType).get(propertyKey).filter = filter\n  }\n}\n\n"]}