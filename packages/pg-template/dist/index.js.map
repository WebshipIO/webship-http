{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import * as PostgresFormat from 'pg-format'\nimport {Pool, PoolClient, Connection, QueryResult} from 'pg'\n\nexport interface Repository {\n  readonly pool: Pool\n}\n\nexport type RepositoryClass = new(...args: Array<any>) => Repository\n\nexport type QueryType = 'Query' | 'PureQuery' | 'TransactionQuery'\n\nexport interface QueryProperties {\n  type: QueryType\n  sql: string\n  fn: (...args: Array<any>) => any\n  filter: (r: QueryResult | ReadonlyArray<QueryResult>) => any\n  guard?: (r: QueryResult | ReadonlyArray<QueryResult>) => boolean\n  guardMessage?: string\n  transformed: boolean\n}\n\nexport class PgTemplateContainer extends Map<RepositoryClass, Map<PropertyKey, QueryProperties>> {\n  private static sInstance: PgTemplateContainer\n\n  public static get instance(): PgTemplateContainer {\n    if (PgTemplateContainer.sInstance === undefined) {\n      PgTemplateContainer.sInstance = new PgTemplateContainer()\n    }\n    return PgTemplateContainer.sInstance\n  }\n\n  public transform() {\n    for (let [classType, map] of super.entries()) {\n      for (let [key, value] of map.entries()) {\n        if (typeof value.sql === 'string' && value.transformed !== true) {\n          value.transformed = true\n          switch (value.type) {\n          case 'Query':\n            value.fn = Reflect.get(classType.prototype, key)\n            Reflect.defineProperty(classType.prototype, key, {\n              value: async function (...args: any[]) {\n                let result = await this.pool.query(PostgresFormat.withArray(value.sql, args))\n                return typeof value.filter === 'function' ? value.filter(result) : result\n              }\n            })\n            break\n          case 'PureQuery':\n            value.fn = Reflect.get(classType.prototype, key)\n            Reflect.defineProperty(classType.prototype, key, {\n              value: function (...args: any[]) {\n                return async function (c: PoolClient | Pool) {\n                  let result = await c.query(PostgresFormat.withArray(value.sql, args))\n                  return typeof value.filter === 'function' ? value.filter(result) : result\n                }\n              }\n            })\n            break\n          case 'TransactionQuery':\n            value.fn = Reflect.get(classType.prototype, key)\n            Reflect.defineProperty(classType.prototype, key, {\n              value: async function (...args: any[]) {\n                let connection = await this.pool.connect()\n                let result: QueryResult | Array<QueryResult>\n                let returnValue: any\n                try {\n                  await connection.query('BEGIN')\n                  result = await connection.query(PostgresFormat.withArray(value.sql, args))\n                  await connection.query('COMMIT')\n                  if (typeof value.guard === 'function') {\n                    if (!value.guard(result)) {\n                      throw new Error(`Incorrect transaction: ${typeof value.guardMessage === 'string' ? value.guardMessage : ''}`)\n                    }\n                  }\n                } catch (e) {\n                  await connection.query('ROLLBACK')\n                  throw e\n                } finally {\n                  connection.release()\n                }\n                return typeof value.filter === 'function' ? value.filter(result) : result\n              }\n            })\n            break\n          }\n        }\n      }\n    }\n  }\n\n  public untransform() {\n    for (let [classType, map] of super.entries()) {\n      for (let [key, value] of map.entries()) {\n        if (typeof value.sql === 'string' && value.transformed === true) {\n          value.transformed = false\n          switch (value.type) {\n          case 'Query':\n          case 'PureQuery': \n          case 'TransactionQuery':\n            Reflect.defineProperty(classType.prototype, key, {\n              value: value.fn\n            })\n            break\n          }\n        }\n      }\n    }\n  }\n}\n\nexport function Query(sql: string): PropertyDecorator {\n  return function (target: Repository, propertyKey: PropertyKey) {\n    let classType = target.constructor as RepositoryClass\n    if (!PgTemplateContainer.instance.has(classType)) {\n      PgTemplateContainer.instance.set(classType, new Map())\n    }\n    let c = PgTemplateContainer.instance.get(classType)\n    if (!c.has(propertyKey)) {\n      c.set(propertyKey, Object.create(null))\n    } \n    c.get(propertyKey).type = 'Query'\n    c.get(propertyKey).sql = sql\n  }\n}\n\nexport function PureQuery(sql: string): PropertyDecorator {\n  return function (target: Repository, propertyKey: PropertyKey) {\n    let classType = target.constructor as RepositoryClass\n    if (!PgTemplateContainer.instance.has(classType)) {\n      PgTemplateContainer.instance.set(classType, new Map())\n    }\n    let c = PgTemplateContainer.instance.get(classType)\n    if (!c.has(propertyKey)) {\n      c.set(propertyKey, Object.create(null))\n    } \n    c.get(propertyKey).type = 'PureQuery'\n    c.get(propertyKey).sql = sql\n  }\n}\n\nexport function TransactionQuery(sql: string): PropertyDecorator {\n  return function (target: Repository, propertyKey: PropertyKey) {\n    let classType = target.constructor as RepositoryClass\n    if (!PgTemplateContainer.instance.has(classType)) {\n      PgTemplateContainer.instance.set(classType, new Map())\n    }\n    let c = PgTemplateContainer.instance.get(classType)\n    if (!c.has(propertyKey)) {\n      c.set(propertyKey, Object.create(null))\n    } \n    c.get(propertyKey).type = 'TransactionQuery'\n    c.get(propertyKey).sql = sql\n  }\n}\n\nexport function TransactionGuard<T>(guard: (r: QueryResult | Array<QueryResult>) => boolean, message?: string): PropertyDecorator {\n  return function (target: Repository, propertyKey: PropertyKey) {\n    let classType = target.constructor as RepositoryClass\n    if (!PgTemplateContainer.instance.has(classType)) {\n      PgTemplateContainer.instance.set(classType, new Map())\n    }\n    let c = PgTemplateContainer.instance.get(classType)\n    if (!c.has(propertyKey)) {\n      c.set(propertyKey, Object.create(null))\n    } \n    c.get(propertyKey).guard = guard\n    c.get(propertyKey).guardMessage = message\n  }\n}\n\nexport function QueryFilter<T>(filter: (r: QueryResult | Array<QueryResult>) => T): PropertyDecorator {\n  return function (target: Repository, propertyKey: PropertyKey) {\n    let classType = target.constructor as RepositoryClass\n    if (!PgTemplateContainer.instance.has(classType)) {\n      PgTemplateContainer.instance.set(classType, new Map())\n    }\n    let c = PgTemplateContainer.instance.get(classType)\n    if (!c.has(propertyKey)) {\n      c.set(propertyKey, Object.create(null))\n    } \n    c.get(propertyKey).filter = filter\n  }\n}\n"]}