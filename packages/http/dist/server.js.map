{"version":3,"sources":["server.ts"],"names":[],"mappings":"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","file":"server.js","sourcesContent":["/*\n\n             Http.Server\n                  |\n      'connection' 'request' --- 'close', ...\n                  |\n               Executor\n           /              \\\n   SessionExecutor   RequestExecutor\n          |                |\n     Controller      ControllerMethod\n          |                |\n           \\              /\n            |            |\n            +------------+\n                  |\n         Controller Dispatcher\n\n*/\n\nimport {Socket, AddressInfo} from 'net'\nimport {IncomingMessage, ServerResponse, Server, createServer} from 'http'\nimport {Scope, ProviderKey, Provider, ProviderInstance, ProviderContainer, DependencyContainer, NodeDispatcher} from '@webnode/cdi'\nimport {ApplicationContext, SessionContext, RequestContext} from '@webnode/cdi'\nimport {HttpError} from './error'\nimport {ServerConfig} from './config'\nimport {Registry} from './registry'\nimport {RequestExecutor} from './executor'\n\nexport class HttpServer {\n  public static create(config?: ServerConfig): HttpServer {\n    return new HttpServer(config)\n  }\n\n  private nodeDispatcher: NodeDispatcher = new NodeDispatcher(ProviderContainer.instance, DependencyContainer.instance)\n  private server: Server = createServer()\n  private closed: boolean = true\n  private connectionCount: number = 0\n  private config: ServerConfig\n  private context: ApplicationContext\n\n  constructor(config?: ServerConfig) {\n    if (typeof config !== 'object' || config === null) {\n      config = Object.create(null)\n    }\n    this.config = config\n  }\n\n  public async serve() {\n    let hostname = '127.0.0.1'\n    let port = 0\n    if (typeof this.config.hostname === 'string') {\n      hostname = this.config.hostname\n    }\n    if (typeof this.config.port === 'number') {\n      port = this.config.port\n    }\n    if (typeof this.config.keepAliveTimeout === 'number') {\n      this.server.keepAliveTimeout = this.config.keepAliveTimeout\n    }\n    if (typeof this.config.timeout === 'number') {\n      this.server.timeout = this.config.timeout\n    }\n    this.server.on('connection', (connection) => this.prepareSessionContext(connection))\n    this.server.on('request', (req, res) => new RequestExecutor(req, res, this.nodeDispatcher, this.context, Registry.instance, this.config).exec())\n    await this.prepareApplicationContext()\n    await new Promise((complete, fail) => this.server.listen(port, hostname, complete))\n    this.closed = false\n  }\n\n  public async close() {\n    if (!this.closed) {\n      await new Promise((complete, fail) => this.server.close(complete))\n      this.closed = true\n      if (this.connectionCount === 0) {\n        await this.nodeDispatcher.destroyApplicationContext()\n      }\n    }\n  }\n\n  public address(): AddressInfo {\n    return this.server.address() as AddressInfo\n  }\n\n  private async prepareApplicationContext() {\n    this.context = await this.nodeDispatcher.createApplicationContext()\n    for (let node of Registry.instance.valuesOfEventNodes()) {\n      await this.nodeDispatcher.createNodeOfApplicationContext(node) \n    }\n  }\n\n  private async prepareSessionContext(connection: Socket) {\n    let session = await this.nodeDispatcher.createSessionContext()\n    for (let node of Registry.instance.valuesOfRouteNodes()) {\n      await this.nodeDispatcher.createNodeOfSessionContext(node, session) // Controller Node Instance 一定只有一个\n    }\n    (connection as any).__webnode_http_session__ = session\n    connection.on('close', async () => {\n      await this.nodeDispatcher.destroySessionContext(session)\n      this.connectionCount--\n      if (this.closed) {\n        await this.nodeDispatcher.destroyApplicationContext()\n      }\n    })\n    this.connectionCount++\n  }\n}\n\n"]}