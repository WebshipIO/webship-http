{"version":3,"sources":["registry.ts"],"names":[],"mappings":"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","file":"registry.js","sourcesContent":["import {Node, NodeDispatcher} from '@webnode/cdi'\nimport {HttpMethod, RePathname, RePathnameParams} from './request'\nimport {HttpStatus} from './response'\nimport {AutoMethod, AutoMethodProperties, AutoMethodPayload, ParameterPoint} from './automethod'\nimport {AutoMethodPropertiesContainer, AutoMethodPayloadContainer} from './automethod'\nimport {Event, EventContainer} from './event'\nimport {Route, RouteContainer} from './route'\n\nexport class Registry {\n  private static sInstance: Registry\n\n  public static get instance(): Registry {\n    if (Registry.sInstance === undefined) {\n      Registry.sInstance = new Registry()\n    }\n    return Registry.sInstance\n  }\n\n  private readonly autoMethodPropertiesContainer: AutoMethodPropertiesContainer = new Map()\n  private readonly autoMethodPayloadContainer: AutoMethodPayloadContainer = new Map()\n  \n  private readonly routeContainer: RouteContainer = new Map()\n  private readonly eventContainer: EventContainer = new Map()\n\n  private readonly routeNodeSet: Set<Node> = new Set()\n  private readonly eventNodeSet: Set<Node> = new Set()\n\n  public * valuesOfEventAutoMethods(event: Event): Iterable<AutoMethod> {\n    if (this.eventContainer.has(event)) {\n      let value = this.eventContainer.get(event)\n      if (value instanceof Array) {\n        for (let item of value) {\n          yield item\n        }\n      } else {\n        yield value\n      }\n    }\n  }\n\n  public * valuesOfEventNodes(): Iterable<Node> {\n    for (let node of this.eventNodeSet) {\n      yield node\n    }\n  }\n\n  public * valuesOfRouteNodes(): Iterable<Node> {\n    for (let node of this.routeNodeSet) {\n      yield node\n    }\n  }\n\n  public getRoute(method: HttpMethod, pathname: string): [Route, RePathnameParams] {\n    if (!this.routeContainer.has(method)) {\n      return [null, null]\n    } \n    for (let [rePathname, route] of this.routeContainer.get(method).entries()) {\n      if (route.isActive()) {\n        let pathnameRegExp = route.getRequestPathnameRegExp()\n        let input = pathnameRegExp.re.exec(pathname)\n        if (input !== null) {\n          for (let autoMethod of route.valuesOfAutoMethods()) {\n            let node = this.autoMethodPropertiesContainer.get(autoMethod).getNode()\n            let params: RePathnameParams = Object.create(null)\n            for (let [i, key] of pathnameRegExp.keys.entries()) {\n              params[key.name] = input[i+1]\n            }\n            return [route, params]\n          }\n        }\n      }\n    }\n    return [null, null]\n  }\n\n  public getAutoMethodProperties(autoMethod: AutoMethod): AutoMethodProperties {\n    return this.autoMethodPropertiesContainer.get(autoMethod)\n  }\n\n  public getAutoMethodPayload(autoMethod: AutoMethod): AutoMethodPayload {\n    return this.autoMethodPayloadContainer.get(autoMethod)\n  }\n\n  public hasAutoMethodProperties(autoMethod: AutoMethod): boolean {\n    return this.autoMethodPropertiesContainer.has(autoMethod)\n  }\n\n  public hasAutoMethodPayload(autoMethod: AutoMethod): boolean {\n    return this.autoMethodPayloadContainer.has(autoMethod)\n  }\n\n  public registerParameter(node: Node, autoMethod: AutoMethod, parameterIndex: number, point: ParameterPoint) {\n    if (!this.autoMethodPropertiesContainer.has(autoMethod)) {\n      this.autoMethodPropertiesContainer.set(autoMethod, new AutoMethodProperties(node))\n    }\n    this.autoMethodPropertiesContainer.get(autoMethod).setParameter(parameterIndex, point)\n  }\n\n  public registerResponseStatus(node: Node, autoMethod: AutoMethod, status: HttpStatus) {\n    if (!this.autoMethodPayloadContainer.has(autoMethod)) {\n      this.autoMethodPayloadContainer.set(autoMethod, new AutoMethodPayload())\n    }\n    this.autoMethodPayloadContainer.get(autoMethod).setResponseStatus(status)\n  }\n\n  public registerMiddleware(node: Node, autoMethod: AutoMethod) {\n    if (!this.autoMethodPropertiesContainer.has(autoMethod)) {\n      this.autoMethodPropertiesContainer.set(autoMethod, new AutoMethodProperties(node))\n    }\n    this.autoMethodPropertiesContainer.get(autoMethod).addMiddleware(autoMethod)\n  }\n\n  public registerRoute(node: Node, autoMethod: AutoMethod, method: HttpMethod, rePathname: RePathname) {\n    if (!this.autoMethodPropertiesContainer.has(autoMethod)) {\n      this.autoMethodPropertiesContainer.set(autoMethod, new AutoMethodProperties(node))\n    }\n    if (!this.routeContainer.has(method)) {\n      this.routeContainer.set(method, new Map())\n    }\n    let methods = this.routeContainer.get(method)\n    if (!methods.has(rePathname)) {\n      methods.set(rePathname, new Route(method, rePathname))\n    }\n    methods.get(rePathname).addAutoMethod(autoMethod)\n  }\n\n  public registerEvent(node: Node, autoMethod: AutoMethod, event: Event) {\n    if (!this.autoMethodPropertiesContainer.has(autoMethod)) {\n      this.autoMethodPropertiesContainer.set(autoMethod, new AutoMethodProperties(node))\n    }\n    if (this.eventContainer.has(event)) {\n      let tmp = this.eventContainer.get(event)\n      if (tmp instanceof Array) {\n        tmp.push(autoMethod)\n      } else {\n        this.eventContainer.set(event, [tmp, autoMethod])\n      }\n    } else {\n      this.eventContainer.set(event, autoMethod)\n    }\n  }\n\n  public registerRouteNode(node: Node) {\n    this.routeNodeSet.add(node)\n  }\n\n  public registerEventNode(node: Node) {\n    this.eventNodeSet.add(node)\n  }\n}\n\n\n"]}