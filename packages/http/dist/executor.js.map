{"version":3,"sources":["executor.ts"],"names":[],"mappings":"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","file":"executor.js","sourcesContent":["import {NodeDispatcher, ApplicationContext, SessionContext, RequestContext} from '@webnode/cdi'\nimport {IncomingMessage as NativeServerRequest, ServerResponse as NativeServerResponse} from 'http'\nimport {Readable} from 'stream'\nimport {UrlWithParsedQuery, parse as parseUrl} from 'url'\nimport {IncomingForm, File} from \"formidable\"\nimport {HttpError, HttpErrorCode} from './error'\nimport {ServerRequest, HttpMethod} from './request'\nimport {ServerResponse, ServerResponseImpl} from './response'\nimport {FormConfig} from './config'\nimport {AutoMethod, AutoMethodProperties, ParameterPoint} from './automethod'\nimport {Event} from './event'\nimport {Route} from './route'\nimport {Registry} from './registry'\n\nfunction hasContent(headerKey: string, headerContent: string): boolean {\n  if (typeof headerKey === 'string' && headerKey.search(headerContent) > -1) {\n    return true\n  }\n  return false\n}\n\nfunction hasFormData(headerKey: string): boolean {\n  return hasContent(headerKey, \"application/json\") ||\n         hasContent(headerKey, \"multipart/form-data\") ||\n         hasContent(headerKey, \"application/x-www-form-urlencoded\")\n}\n\nexport class RequestExecutor {\n  private requestContext: RequestContext\n  private request: ServerRequest = Object.create(null)\n  private response: ServerResponse = new ServerResponseImpl()\n  private route: Route\n  private error: Error\n  private ended: boolean = false\n\n  constructor(\n    private nativeRequest: NativeServerRequest,\n    private nativeResponse: NativeServerResponse,\n    private nodeDispatcher: NodeDispatcher,\n    private applicationContext: ApplicationContext,\n    private registry: Registry,\n    private config: FormConfig\n  ) {\n    let request = this.request as any\n    request.httpVersion = nativeRequest.httpVersion\n    request.httpVersionMajor = nativeRequest.httpVersionMajor\n    request.httpVersionMinor = nativeRequest.httpVersionMinor\n    request.url = parseUrl(decodeURIComponent(nativeRequest.url), true)\n    request.method = (request.url.query.__method ? request.url.query.__method : nativeRequest.method).toUpperCase()\n    request.headers = nativeRequest.headers\n    request.applicationContext = applicationContext\n    request.sessionContext = (nativeRequest.connection as any).__webnode_http_session__;\n    [this.route, request.params] = this.registry.getRoute(request.method, request.url.pathname)\n  }\n\n  private async parseCharSequence() {\n    // TODO: buffer?\n    return new Promise((complete, fail) => {\n      let body = ''\n      this.nativeRequest.on('data', (data: string | Buffer) => {\n        body += data\n      })\n      this.nativeRequest.on('error', (error: Error) => {\n        fail(HttpError.create(HttpErrorCode.BAD_REQEUST, error.message, error.stack))\n      })\n      this.nativeRequest.on('end', () => {\n        (this.request as any).body = body\n        complete()\n      })\n    })\n  }\n\n  private async parseFormData() {\n    return new Promise((complete, fail) => {\n      let body = Object.create(null)\n      this.createIncomingForm()\n          .on(\"error\", (error: Error) => {\n            fail(HttpError.create(HttpErrorCode.BAD_REQEUST, error.message, error.stack))\n          })\n          .on(\"file\", (name: string, file: File) => {\n            if (!(name in body)) {\n              body[name] = []\n            }\n            body[name].push(file)\n          })\n          .on(\"field\", (name: string, value: any) => {\n            body[name] = value\n          })\n          .on(\"end\", () => {\n            (this.request as any).body = body\n            complete()\n          })\n          .parse(this.nativeRequest)\n    })\n  }\n\n  private async parseReqBody() {\n    if (hasFormData(this.nativeRequest.headers[\"content-type\"] as string)) {\n      await this.parseFormData()\n    } else {\n      await this.parseCharSequence()\n    }\n  }\n\n  private async prepareContext() {\n    (this.request as any).requestContext = await this.nodeDispatcher.createRequestContext(this.request.sessionContext)\n\n    this.nativeResponse.on('finish', async () => {\n      this.ended = true\n      for (let autoMethod of this.registry.valuesOfEventAutoMethods(Event.REQUEST_END)) {\n        let properties = this.registry.getAutoMethodProperties(autoMethod)\n        let node = properties.getNode()\n        let args = this.nodeDispatcher.genArgumentsOfRequestContext(node, autoMethod.name, this.request.requestContext)\n        let instance = this.request.applicationContext.value.nodeContainer.get(node)\n        this.composeArgs(properties, args)\n        await Reflect.apply(autoMethod, instance, args) \n      }\n      await this.nodeDispatcher.destroyRequestContext(this.request.requestContext)\n    })\n\n    this.nativeResponse.on('error', (error) => this.error = error)\n    this.nativeRequest.on('error', (error) => this.error = error)\n    this.nativeRequest.on('close', async () => {\n      if (!this.ended) {\n        this.ended = true\n        for (let autoMethod of this.registry.valuesOfEventAutoMethods(Event.REQUEST_ERROR)) {\n          let properties = this.registry.getAutoMethodProperties(autoMethod)\n          let node = properties.getNode()\n          let args = this.nodeDispatcher.genArgumentsOfRequestContext(node, autoMethod.name, this.request.requestContext)\n          let instance = this.request.applicationContext.value.nodeContainer.get(node)\n          this.composeArgs(properties, args)\n          await Reflect.apply(autoMethod, instance, args) \n        }\n        await this.nodeDispatcher.destroyRequestContext(this.request.requestContext)\n      }\n    })\n\n    for (let autoMethod of this.registry.valuesOfEventAutoMethods(Event.REQUEST_START)) {\n      let properties = this.registry.getAutoMethodProperties(autoMethod)\n      let node = properties.getNode()\n      let args = this.nodeDispatcher.genArgumentsOfRequestContext(node, autoMethod.name, this.request.requestContext)\n      let instance = this.request.applicationContext.value.nodeContainer.get(node)\n      this.composeArgs(properties, args)\n      await Reflect.apply(autoMethod, instance, args) \n    }\n  }\n\n  private async execRoute() {\n    for (let autoMethod of this.route.valuesOfAutoMethods()) {\n      let properties = this.registry.getAutoMethodProperties(autoMethod)\n      let node = properties.getNode()\n      let args = this.nodeDispatcher.genArgumentsOfRequestContext(node, autoMethod.name, this.request.requestContext)\n      let instance =  this.request.sessionContext.value.nodeContainer.get(node)\n      if (this.registry.hasAutoMethodPayload(autoMethod)) {\n        this.response.status = this.registry.getAutoMethodPayload(autoMethod).getResponseStatus()  \n      }\n      this.composeArgs(properties, args)\n      for (let middleware of properties.valuesOfMiddlewares()) {\n        await Reflect.apply(middleware, instance, [this.request, this.response]) \n      }\n      await Reflect.apply(autoMethod, instance, args) \n    }\n  }\n\n  private send() {\n    this.nativeResponse.writeHead(this.response.status, this.response.getHeaders())\n    if (this.response.body === undefined || this.response.body === null) {\n      this.nativeResponse.end()\n    } else if (typeof this.response.body === 'object') {\n      if (this.response.body instanceof Buffer) {\n        this.nativeResponse.end(this.response.body)\n      } else if (this.response.body instanceof Readable) {\n        this.response.body.pipe(this.nativeResponse)\n      } else {\n        this.nativeResponse.end(JSON.stringify(this.response.body))\n      }\n    } else if (typeof this.response.body === 'string') {\n      this.nativeResponse.end(this.response.body)\n    } else {\n      this.nativeResponse.end(String(this.response.body))\n    }\n  }\n\n  public async exec() {\n    await this.prepareContext()\n    try {\n      if (this.route === null) {\n        this.execHttpError(HttpError.create(HttpErrorCode.NOT_FOUND))\n      } else {\n        await this.parseReqBody()\n        await this.execRoute()\n        this.send()\n      }\n    } catch (err) {\n      if (!(err instanceof HttpError)) {\n        err = HttpError.create(HttpErrorCode.INTERNAL_SERVER_ERROR, err.message, err.stack)\n      }\n      this.execHttpError(err)\n    }\n  }\n\n  private composeArgs(properties: AutoMethodProperties, args: Array<any>) {\n    for (let [index, point] of properties.entriesOfParameters()) {\n      switch (point) {\n      case ParameterPoint.REQUEST:\n        args[index] = this.request\n        break  \n      case ParameterPoint.RESPONSE:\n        args[index] = this.response\n        break  \n      case ParameterPoint.REQUEST_URL:\n        args[index] = this.request.url\n        break  \n      case ParameterPoint.REQUEST_QUERY:\n        args[index] = this.request.url.query\n        break  \n      case ParameterPoint.REQUEST_HEADERS:\n        args[index] = this.nativeRequest.headers\n        break  \n      case ParameterPoint.REQUEST_PARAMS:\n        args[index] = this.request.params\n        break  \n      case ParameterPoint.REQUEST_BODY:\n        args[index] = this.request.body\n        break  \n      case ParameterPoint.ERROR:\n        args[index] = this.error\n        break  \n      }\n    }\n  }\n\n  private async execHttpError(error: HttpError) {\n    this.error = error\n    this.nativeResponse.writeHead(error.statusCode)\n    this.nativeResponse.end(JSON.stringify({\n      message: error.message,\n      stack: error.stack\n    }))\n  }\n\n  private createIncomingForm(): IncomingForm {\n    return Object.assign(new IncomingForm(), this.config)\n  }\n}\n"]}