{"version":3,"sources":["route.ts"],"names":[],"mappings":";;AAAA,+CAA8C;AAI9C,MAAa,cAAc;IAKzB,YAAY,UAAsB;QAChC,IAAI,CAAC,IAAI,GAAG,EAAE,CAAA;QACd,IAAI,CAAC,UAAU,GAAG,UAAU,CAAA;QAC5B,IAAI,CAAC,EAAE,GAAG,YAAY,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,CAAA;IACpD,CAAC;CACF;AAVD,wCAUC;AAED,MAAa,KAAK;IAKhB,YACU,aAAyB,EACzB,iBAA6B;QAD7B,kBAAa,GAAb,aAAa,CAAY;QACzB,sBAAiB,GAAjB,iBAAiB,CAAY;QAJ/B,WAAM,GAAY,IAAI,CAAA;QAM5B,IAAI,CAAC,qBAAqB,GAAG,IAAI,cAAc,CAAC,iBAAiB,CAAC,CAAA;IACpE,CAAC;IAEM,SAAS,CAAC,MAAe;QAC9B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;IACtB,CAAC;IAEM,QAAQ;QACb,OAAO,IAAI,CAAC,MAAM,CAAA;IACpB,CAAC;IAEM,aAAa,CAAC,UAAsB;QACzC,IAAI,IAAI,CAAC,WAAW,YAAY,KAAK,EAAE;YACrC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;SAClC;aAAM,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS,EAAE;YACzC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAA;SAC9B;aAAM;YACL,IAAI,GAAG,GAAG,IAAI,CAAC,WAAW,CAAA;YAC1B,IAAI,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,CAAA;YACxB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;SAClC;IACH,CAAC;IAEM,CAAC,mBAAmB;QACzB,IAAI,IAAI,CAAC,WAAW,YAAY,KAAK,EAAE;YACrC,KAAK,IAAI,UAAU,IAAI,IAAI,CAAC,WAAW,EAAE;gBACvC,MAAM,UAAU,CAAA;aACjB;SACF;aAAM,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS,EAAE;SAC1C;aAAM;YACL,MAAM,IAAI,CAAC,WAAyB,CAAA;SACrC;IACH,CAAC;IAEM,gBAAgB;QACrB,OAAO,IAAI,CAAC,aAAa,CAAA;IAC3B,CAAC;IAEM,oBAAoB;QACzB,OAAO,IAAI,CAAC,iBAAiB,CAAA;IAC/B,CAAC;IAEM,wBAAwB;QAC7B,OAAO,IAAI,CAAC,qBAAqB,CAAA;IACnC,CAAC;CACF;AAtDD,sBAsDC","file":"route.js","sourcesContent":["import * as PathToRegexp from \"path-to-regexp\"\nimport {HttpMethod, RePathname, RePathnameParams} from './request'\nimport {AutoMethod} from './automethod'\n\nexport class PathnameRegExp {\n  public readonly keys: Array<PathToRegexp.Key>\n  public readonly rePathname: string\n  public readonly re: RegExp\n\n  constructor(rePathname: RePathname) {\n    this.keys = []\n    this.rePathname = rePathname\n    this.re = PathToRegexp(this.rePathname, this.keys)\n  }\n}\n\nexport class Route {       \n  private autoMethods: AutoMethod | Array<AutoMethod>\n  private requestPathnameRegExp: PathnameRegExp \n  private active: boolean = true\n\n  constructor(\n    private requestMethod: HttpMethod,\n    private requestRePathname: RePathname \n  ) {\n    this.requestPathnameRegExp = new PathnameRegExp(requestRePathname)\n  }\n\n  public setActive(active: boolean) {\n    this.active = active\n  }\n\n  public isActive(): boolean {\n    return this.active\n  }\n\n  public addAutoMethod(autoMethod: AutoMethod) {\n    if (this.autoMethods instanceof Array) {\n      this.autoMethods.push(autoMethod)\n    } else if (this.autoMethods === undefined) {\n      this.autoMethods = autoMethod\n    } else {\n      let tmp = this.autoMethods\n      this.autoMethods = [tmp]\n      this.autoMethods.push(autoMethod)\n    }\n  }\n\n  public *valuesOfAutoMethods(): Iterable<AutoMethod> {\n    if (this.autoMethods instanceof Array) {\n      for (let autoMethod of this.autoMethods) {\n        yield autoMethod\n      }\n    } else if (this.autoMethods === undefined) {\n    } else {\n      yield this.autoMethods as AutoMethod\n    }\n  }\n\n  public getRequestMethod(): HttpMethod {\n    return this.requestMethod\n  }\n\n  public getRequestRePathname(): RePathname {\n    return this.requestRePathname\n  }\n\n  public getRequestPathnameRegExp(): PathnameRegExp {\n    return this.requestPathnameRegExp\n  }\n}\n\nexport type RouteContainer = Map<HttpMethod, Map<RePathname, Route>>"]}