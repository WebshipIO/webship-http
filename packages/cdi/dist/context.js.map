{"version":3,"sources":["context.ts"],"names":[],"mappings":"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","file":"context.js","sourcesContent":["import {Scope, SessionIdentifier, RequestIdentifier} from './scope'\nimport {Provider, ProviderInstance, ProviderKey, ProviderInstanceContainer} from './provider'\nimport {Node, NodeInstance, NodeInstanceContainer} from './node'\n\nexport class Context {\n  public readonly providerInstanceContainer: ProviderInstanceContainer = new Map()\n  public readonly nodeInstanceContainer: NodeInstanceContainer = new NodeInstanceContainer()\n}\n\nexport class RequestContext extends Context {\n}\n\nexport class SessionContext extends Context {\n  public readonly requests: Map<RequestIdentifier, RequestContext> = new Map()\n}\n\nexport class ApplicationContext extends Context {\n  private static sInstance: ApplicationContext\n\n  public static get instance(): ApplicationContext {\n    if (ApplicationContext.sInstance === undefined) {\n      ApplicationContext.sInstance = new ApplicationContext()\n    }\n    return ApplicationContext.sInstance\n  }\n\n  private readonly sessions: Map<SessionIdentifier, SessionContext> = new Map()\n\n  public createSessionContext(session: SessionIdentifier) {\n    this.sessions.set(session, new SessionContext())\n  }\n\n  public createRequestContext(session: SessionIdentifier, request: RequestIdentifier) {\n    this.sessions.get(session).requests.set(request, new RequestContext())\n  }\n\n  public clearApplicationContext() {\n    this.nodeInstanceContainer.clear()\n    this.providerInstanceContainer.clear()\n    this.sessions.clear()\n  }\n\n  public deleteSessionContext(session: SessionIdentifier) {\n    this.sessions.delete(session)\n  }\n\n  public deleteRequestContext(session: SessionIdentifier, request: RequestIdentifier) {\n    this.sessions.get(session).requests.delete(request)\n  }\n\n  public hasSessionContext(session: SessionIdentifier): boolean {\n    return this.sessions.has(session)\n  }\n\n  public hasRequestContext(session: SessionIdentifier, request: RequestIdentifier): boolean {\n    return this.sessions.has(session) && this.sessions.get(session).requests.has(request)\n  }\n\n  public getProviderInstanceContainerOfApplicationLocal(): ProviderInstanceContainer {\n    return this.providerInstanceContainer\n  }\n\n  public getNodeInstanceContainerOfApplicationLocal(): NodeInstanceContainer {\n    return this.nodeInstanceContainer\n  }\n\n  public getProviderInstanceContainerOfSessionLocal(session: SessionIdentifier): ProviderInstanceContainer {\n    return this.sessions.get(session).providerInstanceContainer\n  }\n\n  public getNodeInstanceContainerOfSessionLocal(session: SessionIdentifier): NodeInstanceContainer {\n    return this.sessions.get(session).nodeInstanceContainer\n  }\n\n  public getProviderInstanceContainerOfRequestLocal(session: SessionIdentifier, request: RequestIdentifier): ProviderInstanceContainer {\n    return this.sessions.get(session).requests.get(request).providerInstanceContainer\n  }\n\n  public getNodeInstanceContainerOfRequestLocal(session: SessionIdentifier, request: RequestIdentifier): NodeInstanceContainer {\n    return this.sessions.get(session).requests.get(request).nodeInstanceContainer\n  }\n\n  public * providerInstancesOfApplicationContext(): Iterable<ProviderInstance> {\n    for (let session of this.sessions.values()) {\n      for (let request of session.requests.values()) {\n        for (let instance of request.providerInstanceContainer.values()) {\n          yield instance\n        }\n      }\n      for (let instance of session.providerInstanceContainer.values()) {\n        yield instance\n      }\n    }\n    for (let instance of this.providerInstanceContainer.values()) {\n      yield instance\n    }\n  }\n\n  public * nodeInstancesOfApplicationContext(): Iterable<ProviderInstance> {\n    for (let session of this.sessions.values()) {\n      for (let request of session.requests.values()) {\n        for (let instance of request.nodeInstanceContainer.values()) {\n          yield instance\n        }\n      }\n      for (let instance of session.nodeInstanceContainer.values()) {\n        yield instance\n      }\n    }\n    for (let instance of this.nodeInstanceContainer.values()) {\n      yield instance\n    }\n  }\n\n  public * providerInstancesOfSessionContext(session: SessionIdentifier): Iterable<ProviderInstance> {\n    let context = this.sessions.get(session)\n    for (let request of context.requests.values()) {\n      for (let instance of request.providerInstanceContainer.values()) {\n        yield instance\n      }\n    }\n    for (let instance of context.providerInstanceContainer.values()) {\n      yield instance\n    }\n  }\n\n  public * nodeInstancesOfSessionContext(session: SessionIdentifier): Iterable<NodeInstance> {\n    let context = this.sessions.get(session)\n    for (let request of context.requests.values()) {\n      for (let instance of request.nodeInstanceContainer.values()) {\n        yield instance\n      }\n    }\n    for (let instance of context.nodeInstanceContainer.values()) {\n      yield instance\n    }\n  }\n\n  public * providerInstancesOfRequestContext(session: SessionIdentifier, request: RequestIdentifier): Iterable<ProviderInstance> {\n    for (let instance of this.sessions.get(session).requests.get(request).providerInstanceContainer.values()) {\n      yield instance\n    }\n  }\n\n  public * nodeInstancesOfRequestContext(session: SessionIdentifier, request: RequestIdentifier): Iterable<NodeInstance> {\n    for (let instance of this.sessions.get(session).requests.get(request).nodeInstanceContainer.values()) {\n      yield instance\n    }\n  }\n}"]}