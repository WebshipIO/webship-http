{"version":3,"sources":["dispatch.ts"],"names":[],"mappings":"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","file":"dispatch.js","sourcesContent":["import {Scope, SessionIdentifier, RequestIdentifier} from './scope'\nimport {Dependency, DependencyContainer} from './dependency'\nimport {Provider, ProviderInstance, ProviderKey, ProviderContainer} from './provider'\nimport {Node, NodeInstance} from './node'\nimport {ApplicationContext} from './context'\n\nexport class NodeDispatcher {\n  public static create(\n    providerContainer: ProviderContainer, \n    dependencyContainer: DependencyContainer,\n    context: ApplicationContext\n  ): NodeDispatcher {\n    return new NodeDispatcher(\n      providerContainer, \n      dependencyContainer, \n      context\n    )\n  }\n\n  constructor(\n    private providerContainer: ProviderContainer, \n    private dependencyContainer: DependencyContainer,\n    private context: ApplicationContext\n  ) {\n  }\n\n  public check() {\n    // (1) scope.provider-key 是否存在\n    let warns = []\n    for (let [node, propertyKey, dependency] of this.dependencyContainer.entriesOfDependencies()) {\n      if (!this.providerContainer.has(dependency.scope, dependency.providerKey)) {\n        warns.push({\n          node: node,\n          propertyKey: propertyKey,\n          parameterIndex: dependency.parameterIndex,\n          providerKey: dependency.providerKey,\n          providerType: dependency.providerType,\n          scope: dependency.scope\n        })\n      }\n    }\n    for (let warn of warns) {\n      console.warn(`provider not found: (node:'${warn.node.name}', propertyKey:'${warn.propertyKey.toString()}', ` +\n                   `parameterIndex:${warn.parameterIndex}, providerKey:'${warn.providerKey.toString()}', ` +\n                   `providerType:'${warn.providerType}', scope:${warn.scope})`)\n    }\n  } \n\n  public genArgumentsOnApplicationLocal<T>(node: Node<T>, propertyKey: PropertyKey): Array<any> {\n    // 生成节点属性的依赖参数\n    let args: Array<ProviderInstance> = []\n    for (let dependency of this.dependencyContainer.valuesOfDependencies(node, propertyKey)) {\n      switch (dependency.scope) {\n      case Scope.APPLICATION:\n        args[dependency.parameterIndex] = this.context.getProviderInstanceContainerOfApplicationLocal().get(dependency.providerKey)\n        break\n      case Scope.SESSION:\n      case Scope.REQUEST:\n        break\n      }\n    }\n    return args\n  }\n\n  public genArgumentsOnSessionLocal<T>(node: Node<T>, propertyKey: PropertyKey, session: SessionIdentifier): Array<any> {\n    // 生成节点属性的依赖参数\n    let args: Array<ProviderInstance> = []\n    for (let dependency of this.dependencyContainer.valuesOfDependencies(node, propertyKey)) {\n      switch (dependency.scope) {\n      case Scope.APPLICATION:\n        args[dependency.parameterIndex] = this.context.getProviderInstanceContainerOfApplicationLocal().get(dependency.providerKey)\n        break\n      case Scope.SESSION:\n        args[dependency.parameterIndex] = this.context.getProviderInstanceContainerOfSessionLocal(session).get(dependency.providerKey)\n        break\n      case Scope.REQUEST:\n        break\n      }\n    }\n    return args\n  }\n\n  public genArgumentsOnRequestLocal<T>(node: Node<T>, propertyKey: PropertyKey, session: SessionIdentifier, request: RequestIdentifier): Array<any> {\n    // 生成节点属性的依赖参数\n    let args: Array<ProviderInstance> = []\n    for (let dependency of this.dependencyContainer.valuesOfDependencies(node, propertyKey)) {\n      switch (dependency.scope) {\n      case Scope.APPLICATION:\n        args[dependency.parameterIndex] = this.context.getProviderInstanceContainerOfApplicationLocal().get(dependency.providerKey)\n        break\n      case Scope.SESSION:\n        args[dependency.parameterIndex] = this.context.getProviderInstanceContainerOfSessionLocal(session).get(dependency.providerKey)\n        break\n      case Scope.REQUEST:\n        args[dependency.parameterIndex] = this.context.getProviderInstanceContainerOfRequestLocal(session, request).get(dependency.providerKey)\n        break\n      }\n    }\n    return args\n  }\n\n  public applyOnApplicationLocal(instance: NodeInstance, propertyKey: PropertyKey) {\n    let args = this.genArgumentsOnApplicationLocal(instance.constructor as Node, propertyKey)\n    Reflect.apply(Reflect.get(instance, propertyKey), instance, args)\n  }\n\n  public applyOnSessionLocal(instance: NodeInstance, propertyKey: PropertyKey, session: SessionIdentifier) {\n    let args = this.genArgumentsOnSessionLocal(instance.constructor as Node, propertyKey, session)\n    Reflect.apply(Reflect.get(instance, propertyKey), instance, args)\n  }\n\n  public applyOnRequestLocal(instance: NodeInstance, propertyKey: PropertyKey, session: SessionIdentifier, request: RequestIdentifier) {\n    let args = this.genArgumentsOnRequestLocal(instance.constructor as Node, propertyKey, session, request)\n    Reflect.apply(Reflect.get(instance, propertyKey), instance, args)\n  }\n\n  public createApplicationContext() {\n    // 创建应用程序环境，此时，所有属于 Application Scope 的 Provider 实例都被创建\n    let providerInstanceContainer = this.context.getProviderInstanceContainerOfApplicationLocal()\n    for (let [key, provider] of this.providerContainer.entries(Scope.APPLICATION)) {\n      providerInstanceContainer.set(key, provider())\n    }\n  }\n\n  public destroyApplicationContext() {\n    // 销毁应用程序环境，所有相关的节点实例、节点实例配置、Provider 实例都被销毁\n    for (let instance of this.context.nodeInstancesOfApplicationContext()) {\n      if (typeof (instance as any).onDestroy === 'function') {\n        (instance as any).onDestroy()\n      }\n    }\n    for (let instance of this.context.providerInstancesOfApplicationContext()) {\n      if (typeof (instance as any).onDestroy === 'function') {\n        (instance as any).onDestroy()\n      }\n    }\n    this.context.clearApplicationContext()\n  }\n\n  public createInstanceOnApplicationLocal<T>(node: Node<T>): T {\n    // 创建一个节点实例，并保存在 Node Instance Context 的应用程序环境；同时，配置节点实例\n    let instance = Reflect.construct(node, this.genArgumentsOnApplicationLocal(node, 'constructor'))\n    this.context.getNodeInstanceContainerOfApplicationLocal().add(node, instance)\n    return instance\n  }\n\n  public getInstanceOnApplicationLocal<T>(node: Node<T>): T | Set<T> {\n    return this.context.getNodeInstanceContainerOfApplicationLocal().get(node)\n  }\n\n  public createSessionContext(): SessionIdentifier {\n    // 创建一个会话环境，准备 Provider Instance Context 和 Node Instance Context；\n    // 同时，所有属于 Session Scope 的 Provider 实例都被创建\n    let session = Symbol('session')\n    this.context.createSessionContext(session)\n    for (let [key, provider] of this.providerContainer.entries(Scope.SESSION)) {\n      this.context.getProviderInstanceContainerOfSessionLocal(session).set(key, provider())\n    }\n    return session\n  }\n\n  public destroySessionContext(session: SessionIdentifier) {\n    // 销毁一个会话环境，所有相关的节点实例、节点实例配置、Provider 实例都被销毁\n    for (let instance of this.context.nodeInstancesOfSessionContext(session)) {\n      if (typeof (instance as any).onDestroy === 'function') {\n        (instance as any).onDestroy()\n      }\n    }\n    for (let instance of this.context.providerInstancesOfSessionContext(session)) {\n      if (typeof (instance as any).onDestroy === 'function') {\n        (instance as any).onDestroy()\n      }\n    }\n    this.context.deleteSessionContext(session)\n  }\n\n  public createInstanceOnSessionLocal<T>(node: Node<T>, session: SessionIdentifier): T {\n    // 创建一个节点实例，并保存在 Node Instance Context 的会话环境；同时，配置节点实例\n    let instance = Reflect.construct(node, this.genArgumentsOnSessionLocal(node, 'constructor', session))\n    this.context.getNodeInstanceContainerOfSessionLocal(session).add(node, instance)\n    return instance\n  }\n\n  public getInstanceOnSessionLocal<T>(node: Node<T>, session: SessionIdentifier): T | Set<T> {\n    return this.context.getNodeInstanceContainerOfSessionLocal(session).get(node)\n  }\n\n  public createRequestContext(session: SessionIdentifier): RequestIdentifier {\n    // 创建一个请求环境，准备 Provider Instance Context 和 Node Instance Context，\n    // 同时，所有属于 Request Scope 的 Provider 实例都被创建\n    let request = Symbol('request')\n    this.context.createRequestContext(session, request)\n    for (let [key, provider] of this.providerContainer.entries(Scope.SESSION)) {\n      this.context.getProviderInstanceContainerOfRequestLocal(session, request).set(key, provider())\n    }\n    return request\n  }\n\n  public destroyRequestContext(session: SessionIdentifier, request: RequestIdentifier) {\n    // 销毁一个请求环境，所有相关的节点实例、节点实例配置、Provider 实例都被销毁\n    for (let instance of this.context.nodeInstancesOfRequestContext(session, request)) {\n      if (typeof (instance as any).onDestroy === 'function') {\n        (instance as any).onDestroy()\n      }\n    }\n    for (let instance of this.context.providerInstancesOfRequestContext(session, request)) {\n      if (typeof (instance as any).onDestroy === 'function') {\n        (instance as any).onDestroy()\n      }\n    }\n    this.context.deleteRequestContext(session, request)\n  } \n\n  public createInstanceOnRequestLocal<T>(node: Node<T>, session: SessionIdentifier, request: RequestIdentifier): T {\n    // 创建一个节点实例，并保存在 Node Instance Context 的请求环境；同时，配置节点实例\n    let instance = Reflect.construct(node, this.genArgumentsOnRequestLocal(node, 'constructor', session, request))\n    this.context.getNodeInstanceContainerOfRequestLocal(session, request).add(node, instance)\n    return instance\n  }\n\n  public getInstanceOnRequestLocal<T>(node: Node<T>, session: SessionIdentifier, request: RequestIdentifier): T | Set<T> {\n    return this.context.getNodeInstanceContainerOfRequestLocal(session, request).get(node)\n  }\n}\n\n\n\n"]}