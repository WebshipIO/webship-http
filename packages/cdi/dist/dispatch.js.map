{"version":3,"sources":["dispatch.ts"],"names":[],"mappings":"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","file":"dispatch.js","sourcesContent":["import {Scope} from './scope'\nimport {Dependency, DependencyContainer} from './dependency'\nimport {Provider, ProviderInstance, ProviderKey, ProviderContainer} from './provider'\nimport {Node, NodeInstance, NodeInstanceContainer} from './node'\nimport {TreeNode} from './tree'\nimport {ApplicationContext, SessionContext, RequestContext} from './context'\n\nexport class NodeDispatcher {\n  public static create(providerContainer: ProviderContainer, dependencyContainer: DependencyContainer): NodeDispatcher {\n    return new NodeDispatcher(providerContainer, dependencyContainer)\n  }\n\n  private context: ApplicationContext\n\n  constructor(\n    private providerContainer: ProviderContainer, \n    private dependencyContainer: DependencyContainer\n  ) {\n  }\n\n  public check() {\n    // (1) scope.provider-key 是否存在\n    let warns = []\n    for (let [node, propertyKey, dependency] of this.dependencyContainer.entries()) {\n      if (!this.providerContainer.has(dependency.scope, dependency.providerKey)) {\n        warns.push({\n          node: node,\n          propertyKey: propertyKey,\n          parameterIndex: dependency.parameterIndex,\n          providerKey: dependency.providerKey,\n          providerType: dependency.providerType,\n          scope: dependency.scope\n        })\n      }\n    }\n    for (let warn of warns) {\n      console.warn(`provider not found: (node:'${warn.node.name}', propertyKey:'${warn.propertyKey.toString()}', ` +\n                   `parameterIndex:${warn.parameterIndex}, providerKey:'${warn.providerKey.toString()}', ` +\n                   `providerType:'${warn.providerType}', scope:${warn.scope})`)\n    }\n  } \n\n  public async createApplicationContext(): Promise<ApplicationContext> {\n    this.context = new TreeNode()\n    this.context.value = Object.create(null)\n    this.context.value.providerContainer = new Map()\n    this.context.value.nodeContainer = new NodeInstanceContainer()\n    let providerInstanceContainer = this.context.value.providerContainer\n    for (let [key, provider] of this.providerContainer.entries(Scope.APPLICATION)) {\n      let instance = provider(this.context)\n      providerInstanceContainer.set(key, instance)\n      if (typeof (instance as any).onCreate === 'function') {\n        await (instance as any).onCreate()\n      }\n    }\n    return this.context\n  }\n\n  public async createNodeOfApplicationContext<T>(node: Node<T>): Promise<T> {\n    let instance = Reflect.construct(node, this.genArgumentsOfApplicationContext(node, 'constructor'))\n    this.context.value.nodeContainer.add(node, instance)\n    if (typeof (instance as any).onCreate === 'function') {\n      await (instance as any).onCreate()\n    }\n    return instance\n  }\n\n  public async destroyApplicationContext() {\n    for (let session of this.context.valuesOfChildren()) {\n      await this.destroySessionContext(session)\n    }\n    for (let instance of this.context.value.nodeContainer.values()) {\n      if (typeof (instance as any).onDestroy === 'function') {\n        await (instance as any).onDestroy()\n      }\n    }\n    for (let instance of this.context.value.providerContainer.values()) {\n      if (typeof (instance as any).onDestroy === 'function') {\n        await (instance as any).onDestroy()\n      }\n    }\n    this.context.clearChildren()\n    this.context.value.nodeContainer.clear()\n    this.context.value.providerContainer.clear()\n  }\n\n  public async createSessionContext(): Promise<SessionContext> {\n    let session = this.context.addChild()\n    session.value = Object.create(null)\n    session.value.providerContainer = new Map()\n    session.value.nodeContainer = new NodeInstanceContainer()\n    let providerInstanceContainer = session.value.providerContainer\n    for (let [key, provider] of this.providerContainer.entries(Scope.SESSION)) {\n      let instance = provider(session)\n      providerInstanceContainer.set(key, instance)\n      if (typeof (instance as any).onCreate === 'function') {\n        await (instance as any).onCreate()\n      }\n    }\n    return session\n  }\n\n  public async createNodeOfSessionContext<T>(node: Node<T>, session: SessionContext): Promise<T> {\n    // 创建一个节点实例，并保存在 Node Instance Context 的请求环境；同时，配置节点实例\n    let instance = Reflect.construct(node, this.genArgumentsOfSessionContext(node, 'constructor', session))\n    session.value.nodeContainer.add(node, instance)\n    if (typeof (instance as any).onCreate === 'function') {\n      await (instance as any).onCreate()\n    }\n    return instance\n  }\n\n  public async destroySessionContext(session: SessionContext) {\n    for (let request of session.valuesOfChildren()) {\n      await this.destroyRequestContext(request)\n    }\n    for (let instance of session.value.nodeContainer.values()) {\n      if (typeof (instance as any).onDestroy === 'function') {\n        await (instance as any).onDestroy()\n      }\n    }\n    for (let instance of session.value.providerContainer.values()) {\n      if (typeof (instance as any).onDestroy === 'function') {\n        await (instance as any).onDestroy()\n      }\n    }\n    session.getParent().deleteChild(session)\n  }\n\n  public async createRequestContext(session: SessionContext): Promise<RequestContext> {\n    let request = session.addChild()\n    request.value = Object.create(null)\n    request.value.providerContainer = new Map()\n    request.value.nodeContainer = new NodeInstanceContainer()\n    let providerInstanceContainer = request.value.providerContainer\n    for (let [key, provider] of this.providerContainer.entries(Scope.SESSION)) {\n      let instance = provider(request)\n      providerInstanceContainer.set(key, instance)\n      if (typeof (instance as any).onCreate === 'function') {\n        await (instance as any).onCreate()\n      }\n    }\n    return request\n  }\n\n  public async createNodeOfRequestContext<T>(node: Node<T>, request: RequestContext): Promise<T> {\n    // 创建一个节点实例，并保存在 Node Instance Context 的请求环境；同时，配置节点实例\n    let instance = Reflect.construct(node, this.genArgumentsOfRequestContext(node, 'constructor', request))\n    request.value.nodeContainer.add(node, instance)\n    if (typeof (instance as any).onCreate === 'function') {\n      await (instance as any).onCreate()\n    }\n    return instance\n  }\n\n  public async destroyRequestContext(request: RequestContext) {\n    for (let instance of request.value.nodeContainer.values()) {\n      if (typeof (instance as any).onDestroy === 'function') {\n        await (instance as any).onDestroy()\n      }\n    }\n    for (let instance of request.value.providerContainer.values()) {\n      if (typeof (instance as any).onDestroy === 'function') {\n        await (instance as any).onDestroy()\n      }\n    }\n    request.getParent().deleteChild(request)\n  } \n\n  public genArgumentsOfApplicationContext<T>(node: Node<T>, propertyKey: PropertyKey): Array<any> {\n    // 生成节点属性的依赖参数\n    let args: Array<ProviderInstance> = []\n    for (let dependency of this.dependencyContainer.values(node, propertyKey)) {\n      switch (dependency.scope) {\n      case Scope.APPLICATION:\n        args[dependency.parameterIndex] = this.context.value.providerContainer.get(dependency.providerKey)\n        break\n      case Scope.SESSION:\n      case Scope.REQUEST:\n        break\n      }\n    }\n    return args\n  }\n\n  public genArgumentsOfSessionContext<T>(node: Node<T>, propertyKey: PropertyKey, session: SessionContext): Array<any> {\n    // 生成节点属性的依赖参数\n    let args: Array<ProviderInstance> = []\n    for (let dependency of this.dependencyContainer.values(node, propertyKey)) {\n      switch (dependency.scope) {\n      case Scope.APPLICATION:\n        args[dependency.parameterIndex] = this.context.value.providerContainer.get(dependency.providerKey)\n        break\n      case Scope.SESSION:\n        args[dependency.parameterIndex] = session.value.providerContainer.get(dependency.providerKey)\n        break\n      case Scope.REQUEST:\n        break\n      }\n    }\n    return args\n  }\n\n  public genArgumentsOfRequestContext<T>(node: Node<T>, propertyKey: PropertyKey, request: RequestContext): Array<any> {\n    // 生成节点属性的依赖参数\n    let args: Array<ProviderInstance> = []\n    for (let dependency of this.dependencyContainer.values(node, propertyKey)) {\n      switch (dependency.scope) {\n      case Scope.APPLICATION:\n        args[dependency.parameterIndex] = this.context.value.providerContainer.get(dependency.providerKey)\n        break\n      case Scope.SESSION:\n        args[dependency.parameterIndex] = request.getParent().value.providerContainer.get(dependency.providerKey)\n        break\n      case Scope.REQUEST:\n        args[dependency.parameterIndex] = request.value.providerContainer.get(dependency.providerKey)\n        break\n      }\n    }\n    return args\n  }\n\n  public applyOfApplicationContext(instance: NodeInstance, propertyKey: PropertyKey): any {\n    let args = this.genArgumentsOfApplicationContext(instance.constructor as Node, propertyKey)\n    return Reflect.apply(Reflect.get(instance, propertyKey), instance, args)\n  }\n\n  public applyOfSessionContext(instance: NodeInstance, propertyKey: PropertyKey, session: SessionContext): any {\n    let args = this.genArgumentsOfSessionContext(instance.constructor as Node, propertyKey, session)\n    return Reflect.apply(Reflect.get(instance, propertyKey), instance, args)\n  }\n\n  public applyOfRequestContext(instance: NodeInstance, propertyKey: PropertyKey, request: RequestContext): any {\n    let args = this.genArgumentsOfRequestContext(instance.constructor as Node, propertyKey, request)\n    return Reflect.apply(Reflect.get(instance, propertyKey), instance, args)\n  }\n}\n\n"]}