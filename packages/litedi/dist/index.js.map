{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import 'reflect-metadata'\n\nexport type ClassType<T=any> = new(...args: Array<any>) => T\n\nconst dependencyContainer: Map<ClassType, {\n  args: Array<any>\n}> = new Map()\n\nconst instanceContainer: Map<ClassType, object> = new Map()\n\nexport function Injectable<T extends ClassType>(t: T): T {\n// 类装饰器，标记类 ``t`` 为一个 LDI 依赖。\n  const args = Reflect.getMetadata('design:paramtypes', t)\n\n  if (args === undefined && Reflect.getPrototypeOf(t) instanceof Function) {\n    throw new Error(`cannot found a valid constructor of 'class ${t.name}'`)\n  }\n\n  dependencyContainer.set(t, {\n    args: args\n  })\n  return t\n}\n\nexport class LDIProvider {\n  public static get<T>(t: ClassType<T>): T {\n  // 根据 ``t`` 获取实例容器内保存的实例。如果没有，就创建一个新的实例；如果依赖容器内没有\n  // ``t`` 的映射，则抛出一个异常。\n    let instance: T\n    if (instanceContainer.has(t)) {\n      instance = instanceContainer.get(t) as any\n    } else if (dependencyContainer.has(t)) {\n      const dep = dependencyContainer.get(t)\n      const params: Array<any> = []\n      if (dep.args instanceof Array) {\n        for (let arg of dep.args) {\n          let param: any\n          if (arg === Number) {\n            param = 0\n          } else if (arg === String) {\n            param = ''\n          } else if (arg === Boolean) {\n            param = true\n          } else if (arg === null) {\n            param = undefined\n          } else if (arg === undefined) {\n            param = undefined\n          } else if (arg === Array) {\n            param = []\n          } else if (arg === Object) {\n            param = Object.create(null)\n          } else {\n            // TODO: 优化这个算法，把递归转换为循环\n            param = LDIProvider.get(arg)\n          }\n          params.push(param)\n        }\n      }\n      instance = new t(...params)\n      instanceContainer.set(t, instance as any)\n      if (typeof (instance as any).onCreate === 'function') {\n        (instance as any).onCreate()\n      }\n    } else {\n      throw new Error(`not found 'class ${t.name}' in instance container`)\n    }\n    return instance\n  }\n\n  public static set<T>(t: ClassType<T>, instance: object) {\n  // 设置 ``t`` 的实例。\n    instanceContainer.set(t, instance)\n  }\n\n  public static destroy() {\n  // 销毁所有实例容器内部保存的实例。\n    for (let instance of instanceContainer.values()) {\n      if (typeof (instance as any).onDestroy === 'function') {\n        (instance as any).onDestroy()\n      }\n    }\n    instanceContainer.clear()\n  }\n}\n\n"]}